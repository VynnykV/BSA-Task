// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectStructure.DAL;

namespace ProjectStructure.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2020, 12, 16, 13, 15, 40, 482, DateTimeKind.Local).AddTicks(6415),
                            Deadline = new DateTime(2022, 2, 15, 9, 4, 40, 974, DateTimeKind.Local).AddTicks(3781),
                            Description = "Qui ex architecto qui.",
                            Name = "next generation",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CreatedAt = new DateTime(2020, 9, 19, 9, 56, 44, 51, DateTimeKind.Local).AddTicks(1154),
                            Deadline = new DateTime(2022, 5, 3, 7, 17, 15, 71, DateTimeKind.Local).AddTicks(8275),
                            Description = "Unde ullam voluptatem eligendi architecto.",
                            Name = "Data",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2021, 7, 5, 11, 51, 26, 655, DateTimeKind.Local).AddTicks(8871),
                            Deadline = new DateTime(2022, 2, 18, 20, 19, 37, 300, DateTimeKind.Local).AddTicks(5625),
                            Description = "Et sunt recusandae et quo dolores.",
                            Name = "Liaison pricing structure Estates",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            CreatedAt = new DateTime(2020, 12, 13, 6, 23, 25, 653, DateTimeKind.Local).AddTicks(7877),
                            Deadline = new DateTime(2022, 3, 9, 21, 41, 39, 936, DateTimeKind.Local).AddTicks(3081),
                            Description = "Porro reprehenderit aliquid quo enim enim.",
                            Name = "Arkansas e-tailers PNG",
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2018, 9, 1, 15, 5, 42, 999, DateTimeKind.Local).AddTicks(1778),
                            Description = "Magni fugit ut consequatur sit voluptatem eum.",
                            Name = "Generic Steel Towels",
                            PerformerId = 1,
                            ProjectId = 1,
                            State = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 4, 28, 8, 56, 35, 369, DateTimeKind.Local).AddTicks(5014),
                            Description = "Et omnis cumque dolorem qui cupiditate aperiam.",
                            FinishedAt = new DateTime(2021, 3, 30, 3, 51, 54, 362, DateTimeKind.Local).AddTicks(8103),
                            Name = "Lake Senior",
                            PerformerId = 1,
                            ProjectId = 1,
                            State = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 4, 28, 8, 56, 35, 369, DateTimeKind.Local).AddTicks(5014),
                            Description = "Incidunt nesciunt similique repudiandae pariatur dolorem pariatur rerum nihil voluptate.",
                            FinishedAt = new DateTime(2021, 5, 30, 3, 51, 54, 362, DateTimeKind.Local).AddTicks(8103),
                            Name = "hack Estonia invoice",
                            PerformerId = 2,
                            ProjectId = 2,
                            State = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2019, 6, 19, 5, 34, 44, 205, DateTimeKind.Local).AddTicks(9796),
                            Description = "Sit doloribus accusantium blanditiis veniam eum.",
                            FinishedAt = new DateTime(2021, 4, 14, 20, 21, 23, 800, DateTimeKind.Local).AddTicks(8111),
                            Name = "solid state maximize",
                            PerformerId = 3,
                            ProjectId = 3,
                            State = 2
                        });
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 2, 7, 26, 20, 985, DateTimeKind.Local).AddTicks(8682),
                            Name = "Mertz - Rath"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 4, 17, 2, 5, 34, 253, DateTimeKind.Local).AddTicks(9217),
                            Name = "Osinski - Von"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 3, 20, 9, 28, 43, 463, DateTimeKind.Local).AddTicks(5550),
                            Name = "Spencer LLC"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2017, 3, 22, 7, 12, 56, 695, DateTimeKind.Local).AddTicks(6353),
                            Name = "Wolff Inc"
                        });
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDay = new DateTime(2002, 4, 9, 0, 13, 54, 114, DateTimeKind.Local).AddTicks(5250),
                            Email = "Rita.Murphy@gmail.com",
                            FirstName = "Rita",
                            LastName = "Murphy",
                            RegisteredAt = new DateTime(2019, 6, 28, 1, 10, 32, 39, DateTimeKind.Local).AddTicks(6504),
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDay = new DateTime(2000, 1, 20, 8, 58, 59, 896, DateTimeKind.Local).AddTicks(7373),
                            Email = "Courtney.McGlynn13@yahoo.com",
                            FirstName = "Courtney",
                            LastName = "McGlynn",
                            RegisteredAt = new DateTime(2017, 10, 7, 10, 23, 29, 7, DateTimeKind.Local).AddTicks(4991),
                            TeamId = 2
                        },
                        new
                        {
                            Id = 3,
                            BirthDay = new DateTime(1966, 7, 14, 22, 56, 1, 944, DateTimeKind.Local).AddTicks(1854),
                            Email = "Danny_Bernier56@hotmail.com",
                            FirstName = "Danny",
                            LastName = "Bernier",
                            RegisteredAt = new DateTime(2017, 6, 20, 1, 57, 31, 862, DateTimeKind.Local).AddTicks(1513),
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Project", b =>
                {
                    b.HasOne("ProjectStructure.DAL.Entities.User", "Author")
                        .WithMany("Projects")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectStructure.DAL.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Task", b =>
                {
                    b.HasOne("ProjectStructure.DAL.Entities.User", "Performer")
                        .WithMany("Tasks")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectStructure.DAL.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.User", b =>
                {
                    b.HasOne("ProjectStructure.DAL.Entities.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectStructure.DAL.Entities.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
